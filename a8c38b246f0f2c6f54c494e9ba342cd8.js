let params={};class MoogFilter{constructor(){this.cutoff=1,this.resonance=0,this._in1=this._in2=this._in3=this._in4=0,this._out1=this._out2=this._out3=this._out4=0}get value(){return this._out4}process(t){const s=Math.max(this.cutoff,.1)*(44100/sampleRate)*1.16,e=4*this.resonance*(1-.15*s*s);return t-=this._out4*e,t*=s*s*.35013*(s*s),this._out1=t+.3*this._in1+(1-s)*this._out1,this._in1=t,this._out2=this._out1+.3*this._in2+(1-s)*this._out2,this._in2=this._out1,this._out3=this._out2+.3*this._in3+(1-s)*this._out3,this._in3=this._out2,this._out4=this._out3+.3*this._in4+(1-s)*this._out4,this._in4=this._out3,this._out4}}const EPS=1e-4;class Envelope{constructor(){this._value=0,this._state="idle",this._samples=0,this._attack=this._decay=this._release=0,this._sustain=1,this._attackRate=this._decayRate=1/0}setADSR(t,s,e,a){this._attack=t*sampleRate,this._decay=Math.E*s*sampleRate,this._sustain=e,this._release=Math.E*a*sampleRate,this._attackRate=1/Math.max(EPS,this._attack),this._decayRate=calcExpRate(1,this._sustain,this._decay)}noteOn(){this._state="attack",this._value=0}noteOff(){switch(this._state){case"idle":case"attack":case"decay":case"sustain":this._state="release",this._releaseRate=calcExpRate(this._value,0,this._release),this._samples=0}}get value(){return this._value}get active(){return"finished"!==this._state}process(){switch(this._state){case"attack":this._value+=this._attackRate,this._samples++>=this._attack&&(this._value=1,this._state=1===this._sustain?"sustain":"decay",this._samples=0);break;case"decay":this._value*=this._decayRate,this._samples++>=this._decay&&(this._value=this._sustain,this._state="sustain",this._samples=0);break;case"release":this._value*=this._releaseRate,this._samples++>=this._release&&(this._value=0,this._state="finished")}return this._value}}function calcExpRate(t,s,e){return Math.exp((Math.log(Math.max(EPS,s))-Math.log(Math.max(EPS,t)))/e)}class Voice{constructor(t,s){this.note=t,this.down=!0,this._phase1=Math.random(),this._phase2=Math.random(),this._panRight=s,this._filter=new MoogFilter,this._ampEnv=new Envelope,this._filterEnv=new Envelope,this.updateParams(),this._ampEnv.noteOn(),this._filterEnv.noteOn()}noteOff(){this._ampEnv.noteOff(),this._filterEnv.noteOff()}get active(){return this._ampEnv.active}updateParams(){const t=((this._panRight?1:-1)*params.panSpread+1)/2*(Math.PI/2);this._gainL=Math.cos(t),this._gainR=Math.sin(t),this._ampEnv.setADSR(convertTime(params.ampEnvAttack),convertTime(params.ampEnvDecay),params.ampEnvSustain,convertTime(params.ampEnvRelease)),this._filterEnv.setADSR(convertTime(params.filterEnvAttack),convertTime(params.filterEnvDecay),params.filterEnvSustain,convertTime(params.filterEnvRelease));const s=mtof(this.note+params.oscAPitch);this._delta1=s/sampleRate;const e=mtof(this.note+params.oscBPitch+params.detune/200);this._delta2=e/sampleRate}render(){const t=saw(this._phase1,this._delta1)*params.oscALevel;this._phase1+=this._delta1,this._phase1>=1&&(this._phase1-=1);const s=saw(this._phase2,this._delta2)*params.oscBLevel;this._phase2+=this._delta2,this._phase2>=1&&(this._phase2-=1);let e=2*Math.random()-1;e*=params.noise;const a=params.filterCutoff+params.filterEnvAmount*this._filterEnv.process();this._filter.cutoff=Math.min(1,a),this._filter.resonance=params.filterResonance;const i=this._filter.process(this._ampEnv.process()*((t+s+e)/3));return[this._gainL*i,this._gainR*i]}}function mtof(t){return 440*Math.pow(2,(t-69)/12)}function saw(t,s){return 2*t-1-polyBlep(t,s)}function polyBlep(t,s){return t<s?(t/=s)+t-t*t-1:t>1-s?(t=(t-1)/s)*t+t+t+1:0}function convertTime(t){return Math.max(.001,13*t**3)}class Processor extends AudioWorkletProcessor{constructor(){super(),this._voices=[],this._sustain=!1,this._panRight=!1,this.port.onmessage=t=>{const{data:s}=t;switch(s.type){case"params":for(params=s.params;this._voices.length>params.voices;)this._voices.shift();this._voices.forEach((t=>t.updateParams()));break;case"noteOn":for(this._voices.push(new Voice(s.note,this._panRight)),this._panRight=!this._panRight;this._voices.length>params.voices;)this._voices.shift();break;case"noteOff":this._voices.forEach((t=>{t.note===s.note&&t.down&&(t.down=!1,this._sustain||t.noteOff())}));break;case"sustain":this._sustain=s.down,s.down||this._voices.forEach((t=>{t.down||t.noteOff()}))}}}process(t,s){const e=s[0][0],a=s[0][1];for(let t=0;t<e.length;++t)[e[t],a[t]]=this._voices.reduce((([t,s],e)=>{const[a,i]=e.render();return[t+a,s+i]}),[0,0]);return this._voices=this._voices.filter((t=>t.active)),!0}}registerProcessor("main",Processor);